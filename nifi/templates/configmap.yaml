apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nifi.fullname" . }}
  labels:
    {{- include "nifi.labels" . | nindent 4 }}
data:
  flow.xml:
    {{- (tpl (.Files.Get "config/flow.xml") .) | nindent 4 }}

  custom-startup.sh: |
    #!/bin/bash -e

    authorizers_file='conf/authorizers.xml'
    nifi_properties_file='conf/nifi.properties'
    scripts_dir='/opt/nifi/scripts'
    [ -f "${scripts_dir}/common.sh" ] && . "${scripts_dir}/common.sh"

    {{- /* Set host connection properties so the node is reachable, with TLS hostname verification */}}
    host_name="${HOSTNAME}.{{ include "nifi.fullname" . }}.{{ .Release.Namespace }}"
    pod_index=$(echo ${HOSTNAME} | sed -E 's/^.*([0-9]+)$/\1/g')

    prop_replace 'nifi.web.https.host' "${host_name}"
    export NIFI_WEB_HTTPS_HOST="${host_name}"
    export NIFI_WEB_PROXY_HOST="${host_name},{{ .Values.ingress.hostName }},{{ .Values.ingress.nodeBaseHostName }}${pod_index}.{{ .Values.ingress.hostName }}"

    {{- /* Enable repository encryption */}}
    prop_replace 'nifi.repository.encryption.protocol.version' '1'
    prop_replace 'nifi.repository.encryption.key.id' '{{ .Values.encryption.repository.keyId }}'
    prop_replace 'nifi.repository.encryption.key.provider' 'KEYSTORE'
    prop_replace 'nifi.repository.encryption.key.provider.keystore.location' 'conf/{{ .Values.encryption.repository.secretRef.key }}'
    prop_replace 'nifi.repository.encryption.key.provider.keystore.password' "${KEYSTORE_PASSWORD}"

    {{- /* Replace properties not exposed by environment variables */}}
    {{- if .Values.cluster.enabled }}
    export NIFI_CLUSTER_ADDRESS="${host_name}"
    prop_replace 'nifi.zookeeper.client.secure' 'true'
    prop_replace 'nifi.zookeeper.security.keystore' "${KEYSTORE_PATH}"
    prop_replace 'nifi.zookeeper.security.keystoreType' "${KEYSTORE_TYPE}"
    prop_replace 'nifi.zookeeper.security.keystorePasswd' "${KEYSTORE_PASSWORD}"
    prop_replace 'nifi.zookeeper.security.truststore' "${TRUSTSTORE_PATH}"
    prop_replace 'nifi.zookeeper.security.truststoreType' "${TRUSTSTORE_TYPE}"
    prop_replace 'nifi.zookeeper.security.truststorePasswd' "${TRUSTSTORE_PASSWORD}"

    {{- /* Connect to NiFi Registry. These lines are commented out in the base config file. */}}
    sed -i -E "s|^.*(nifi.nar.library.provider.nifi-registry.implementation=).*$|\1org.apache.nifi.registry.extension.NiFiRegistryNarProvider|g" "${nifi_properties_file}"

    nifi_registry_url="https://{{ include "nifi-registry.fullname" . }}.{{ .Release.Namespace }}:{{ .Values.nifi_registry.ports.https }}"
    sed -i -E "s|^.*(nifi.nar.library.provider.nifi-registry.url=).*$|\1${nifi_registry_url}|g" "${nifi_properties_file}"

    {{- /* Grant nodes cluster permissions */}}
    list_identities () {
      node_identities=""
      for (( i = 0; i < {{ .Values.global.nifi.nodeCount }}; i++ )); do
        node_dn="CN={{ include "nifi.fullname" . }}-${i}.{{ include "nifi.fullname" . }}.{{ .Release.Namespace }}"
        node_identities="${node_identities}<property name=\"$1 Node-${i}\">${node_dn}</property>\n"
      done
      sed -i -E "s|(<property name=\"$1 1\">.*</property>)|\1\n${node_identities}|g" "${authorizers_file}"
    }
    list_identities 'Node Identity'
    list_identities 'Initial User Identity'

    {{- /* Set file and directory paths to persistent locations */}}
    {{- with .Values.persistence }}
    conf_dir='./data/conf'
    prop_replace 'nifi.flow.configuration.json.file' "${conf_dir}/{{ .config.files.flowJson }}"
    prop_replace 'nifi.flow.configuration.archive.dir' "${conf_dir}/{{ .config.dirs.archive }}"

    sed -i -E "s|(<property name=\"Authorizations File\">).*(</property>)|\1${conf_dir}/{{ .config.files.authorizations }}\2|g" "${authorizers_file}"
    sed -i -E "s|(<property name=\"Users File\">).*(</property>)|\1${conf_dir}/{{ .config.files.users }}\2|g" "${authorizers_file}"
    {{- end }}

    {{- /* Generate a TLS cert for this node from the CSI-provided certificates and private key */}}
    cert_dir='/opt/certmanager'
    tls_dir='/opt/tls'
    rm -f $tls_dir/*
    openssl pkcs12 -export \
      -in $cert_dir/tls.crt \
      -inkey $cert_dir/tls.key \
      -CAfile $cert_dir/ca.crt \
      -passout "pass:${KEYSTORE_PASSWORD}" \
      -out $tls_dir/keystore.p12
    keytool -import -noprompt -trustcacerts \
      -file $cert_dir/ca.crt \
      -storepass "${TRUSTSTORE_PASSWORD}" \
      -destkeystore $tls_dir/truststore.p12 \
      -deststoretype pkcs12
    {{- end }}

    {{- /* Set UI autorefresh interval */}}
    prop_replace 'nifi.ui.autorefresh.interval' {{ .Values.uiRefreshInterval | squote }}

    {{- range $key, $value := .Values.extraConfig.nifiProperties }}
    prop_replace {{ $key | squote }} {{ $value | quote }}
    {{- end }}

    {{- if .Values.debugStartup }}
    sleep 1000000
    {{- end }}

    exec $scripts_dir/start.sh
